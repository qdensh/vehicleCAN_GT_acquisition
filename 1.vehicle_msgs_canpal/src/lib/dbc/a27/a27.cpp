/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.14.0 Sun Mar 31 15:29:41 2019.
 */

#include <string.h>

#include "a27.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t unpack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) << shift);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint64_t)((uint64_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint64_t)((uint64_t)(value & mask) >> shift);
}

int a27_new_message_16_pack(
    uint8_t *dst_p,
    const struct a27_new_message_16_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[2] |= pack_left_shift_u8(src_p->new_signal_103, 0u, 0xffu);

    return (8);
}

int a27_new_message_16_unpack(
    struct a27_new_message_16_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->new_signal_103 |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);

    return (0);
}

uint8_t a27_new_message_16_new_signal_103_encode(double value)
{
    return (uint8_t)(value);
}

double a27_new_message_16_new_signal_103_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_new_message_16_new_signal_103_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_new_message_15_pack(
    uint8_t *dst_p,
    const struct a27_new_message_15_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[2] |= pack_left_shift_u8(src_p->new_signal_102, 7u, 0x80u);
    dst_p[3] |= pack_right_shift_u8(src_p->new_signal_102, 1u, 0x7fu);

    return (8);
}

int a27_new_message_15_unpack(
    struct a27_new_message_15_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->new_signal_102 |= unpack_right_shift_u8(src_p[2], 7u, 0x80u);
    dst_p->new_signal_102 |= unpack_left_shift_u8(src_p[3], 1u, 0x7fu);

    return (0);
}

uint8_t a27_new_message_15_new_signal_102_encode(double value)
{
    return (uint8_t)(value);
}

double a27_new_message_15_new_signal_102_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_new_message_15_new_signal_102_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_tbox_vehicle_request_status_pack(
    uint8_t *dst_p,
    const struct a27_tbox_vehicle_request_status_t *src_p,
    size_t size)
{
    uint16_t reserved_tbox;
    uint16_t tbox_steer_wheel_angle_request;
    uint8_t reserved_2_tbox;
    uint8_t reserved_3_tbox;
    uint8_t tbox_drive_mode_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->tbox_shift_level_request, 0u, 0x03u);
    dst_p[0] |= pack_left_shift_u8(src_p->reserved_1_tbox, 2u, 0x3cu);
    tbox_drive_mode_request = (uint8_t)src_p->tbox_drive_mode_request;
    dst_p[0] |= pack_left_shift_u8(tbox_drive_mode_request, 6u, 0xc0u);
    tbox_steer_wheel_angle_request = (uint16_t)src_p->tbox_steer_wheel_angle_request;
    dst_p[1] |= pack_left_shift_u16(tbox_steer_wheel_angle_request, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(tbox_steer_wheel_angle_request, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->tbox_left_turn_light_request, 0u, 0x03u);
    dst_p[3] |= pack_left_shift_u8(src_p->tbox_right_turn_light_request, 2u, 0x0cu);
    dst_p[3] |= pack_left_shift_u8(src_p->tbox_hazard_light_request, 4u, 0x30u);
    reserved_2_tbox = (uint8_t)src_p->reserved_2_tbox;
    dst_p[3] |= pack_left_shift_u8(reserved_2_tbox, 6u, 0xc0u);
    dst_p[4] |= pack_left_shift_u8(src_p->tbox_low_beam_request, 0u, 0x03u);
    reserved_3_tbox = (uint8_t)src_p->reserved_3_tbox;
    dst_p[4] |= pack_left_shift_u8(reserved_3_tbox, 2u, 0xfcu);
    dst_p[5] |= pack_left_shift_u16(src_p->tbox_target_speed, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(src_p->tbox_target_speed, 8u, 0x03u);
    dst_p[6] |= pack_left_shift_u8(src_p->tbox_ebrake_request, 2u, 0x04u);
    reserved_tbox = (uint16_t)src_p->reserved_tbox;
    dst_p[6] |= pack_left_shift_u16(reserved_tbox, 3u, 0xf8u);
    dst_p[7] |= pack_right_shift_u16(reserved_tbox, 5u, 0xffu);

    return (8);
}

int a27_tbox_vehicle_request_status_unpack(
    struct a27_tbox_vehicle_request_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t reserved_tbox;
    uint16_t tbox_steer_wheel_angle_request;
    uint8_t reserved_2_tbox;
    uint8_t reserved_3_tbox;
    uint8_t tbox_drive_mode_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->tbox_shift_level_request |= unpack_right_shift_u8(src_p[0], 0u, 0x03u);
    dst_p->reserved_1_tbox |= unpack_right_shift_u8(src_p[0], 2u, 0x3cu);
    tbox_drive_mode_request = 0u;
    tbox_drive_mode_request |= unpack_right_shift_u8(src_p[0], 6u, 0xc0u);

    if ((tbox_drive_mode_request & (1u << 1)) != 0u) {
        tbox_drive_mode_request |= 0xfcu;
    }

    dst_p->tbox_drive_mode_request = (int8_t)tbox_drive_mode_request;
    tbox_steer_wheel_angle_request = 0u;
    tbox_steer_wheel_angle_request |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    tbox_steer_wheel_angle_request |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->tbox_steer_wheel_angle_request = (int16_t)tbox_steer_wheel_angle_request;
    dst_p->tbox_left_turn_light_request |= unpack_right_shift_u8(src_p[3], 0u, 0x03u);
    dst_p->tbox_right_turn_light_request |= unpack_right_shift_u8(src_p[3], 2u, 0x0cu);
    dst_p->tbox_hazard_light_request |= unpack_right_shift_u8(src_p[3], 4u, 0x30u);
    reserved_2_tbox = 0u;
    reserved_2_tbox |= unpack_right_shift_u8(src_p[3], 6u, 0xc0u);

    if ((reserved_2_tbox & (1u << 1)) != 0u) {
        reserved_2_tbox |= 0xfcu;
    }

    dst_p->reserved_2_tbox = (int8_t)reserved_2_tbox;
    dst_p->tbox_low_beam_request |= unpack_right_shift_u8(src_p[4], 0u, 0x03u);
    reserved_3_tbox = 0u;
    reserved_3_tbox |= unpack_right_shift_u8(src_p[4], 2u, 0xfcu);

    if ((reserved_3_tbox & (1u << 5)) != 0u) {
        reserved_3_tbox |= 0xc0u;
    }

    dst_p->reserved_3_tbox = (int8_t)reserved_3_tbox;
    dst_p->tbox_target_speed |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    dst_p->tbox_target_speed |= unpack_left_shift_u16(src_p[6], 8u, 0x03u);
    dst_p->tbox_ebrake_request |= unpack_right_shift_u8(src_p[6], 2u, 0x04u);
    reserved_tbox = 0u;
    reserved_tbox |= unpack_right_shift_u16(src_p[6], 3u, 0xf8u);
    reserved_tbox |= unpack_left_shift_u16(src_p[7], 5u, 0xffu);

    if ((reserved_tbox & (1u << 12)) != 0u) {
        reserved_tbox |= 0xe000u;
    }

    dst_p->reserved_tbox = (int16_t)reserved_tbox;

    return (0);
}

uint8_t a27_tbox_vehicle_request_status_tbox_shift_level_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_shift_level_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_shift_level_request_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t a27_tbox_vehicle_request_status_reserved_1_tbox_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_reserved_1_tbox_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_reserved_1_tbox_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int8_t a27_tbox_vehicle_request_status_tbox_drive_mode_request_encode(double value)
{
    return (int8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_drive_mode_request_decode(int8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_drive_mode_request_is_in_range(int8_t value)
{
    return ((value >= -2) && (value <= 1));
}

int16_t a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_tbox_vehicle_request_status_tbox_left_turn_light_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_left_turn_light_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_left_turn_light_request_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t a27_tbox_vehicle_request_status_tbox_right_turn_light_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_right_turn_light_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_right_turn_light_request_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t a27_tbox_vehicle_request_status_tbox_hazard_light_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_hazard_light_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_hazard_light_request_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int8_t a27_tbox_vehicle_request_status_reserved_2_tbox_encode(double value)
{
    return (int8_t)(value);
}

double a27_tbox_vehicle_request_status_reserved_2_tbox_decode(int8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_reserved_2_tbox_is_in_range(int8_t value)
{
    return ((value >= -2) && (value <= 1));
}

uint8_t a27_tbox_vehicle_request_status_tbox_low_beam_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_low_beam_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_low_beam_request_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int8_t a27_tbox_vehicle_request_status_reserved_3_tbox_encode(double value)
{
    return (int8_t)(value);
}

double a27_tbox_vehicle_request_status_reserved_3_tbox_decode(int8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_reserved_3_tbox_is_in_range(int8_t value)
{
    return ((value >= -32) && (value <= 31));
}

uint16_t a27_tbox_vehicle_request_status_tbox_target_speed_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double a27_tbox_vehicle_request_status_tbox_target_speed_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool a27_tbox_vehicle_request_status_tbox_target_speed_is_in_range(uint16_t value)
{
    return (value <= 510u);
}

uint8_t a27_tbox_vehicle_request_status_tbox_ebrake_request_encode(double value)
{
    return (uint8_t)(value);
}

double a27_tbox_vehicle_request_status_tbox_ebrake_request_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_tbox_ebrake_request_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t a27_tbox_vehicle_request_status_reserved_tbox_encode(double value)
{
    return (int16_t)(value);
}

double a27_tbox_vehicle_request_status_reserved_tbox_decode(int16_t value)
{
    return ((double)value);
}

bool a27_tbox_vehicle_request_status_reserved_tbox_is_in_range(int16_t value)
{
    return ((value >= -4096) && (value <= 4095));
}

int a27_sas_status_pack(
    uint8_t *dst_p,
    const struct a27_sas_status_t *src_p,
    size_t size)
{
    uint16_t sas_steering_wheel_angle;
    uint8_t reserved_1_sas;
    uint8_t sas_status_checksum;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    sas_steering_wheel_angle = (uint16_t)src_p->sas_steering_wheel_angle;
    dst_p[0] |= pack_right_shift_u16(sas_steering_wheel_angle, 8u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(sas_steering_wheel_angle, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(src_p->sas_steering_wheel_angle_speed, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->sas_failure_status, 7u, 0x80u);
    dst_p[3] |= pack_left_shift_u8(src_p->sas_calibration_status, 6u, 0x40u);
    reserved_1_sas = (uint8_t)src_p->reserved_1_sas;
    dst_p[3] |= pack_left_shift_u8(reserved_1_sas, 0u, 0x3fu);
    dst_p[4] |= pack_left_shift_u8(src_p->sas_status_message_counter, 4u, 0xf0u);
    sas_status_checksum = (uint8_t)src_p->sas_status_checksum;
    dst_p[4] |= pack_left_shift_u8(sas_status_checksum, 0u, 0x0fu);
    dst_p[5] |= pack_right_shift_u32(src_p->reserved_2_sas, 16u, 0xffu);
    dst_p[6] |= pack_right_shift_u32(src_p->reserved_2_sas, 8u, 0xffu);
    dst_p[7] |= pack_left_shift_u32(src_p->reserved_2_sas, 0u, 0xffu);

    return (8);
}

int a27_sas_status_unpack(
    struct a27_sas_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t sas_steering_wheel_angle;
    uint8_t reserved_1_sas;
    uint8_t sas_status_checksum;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    sas_steering_wheel_angle = 0u;
    sas_steering_wheel_angle |= unpack_left_shift_u16(src_p[0], 8u, 0xffu);
    sas_steering_wheel_angle |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    dst_p->sas_steering_wheel_angle = (int16_t)sas_steering_wheel_angle;
    dst_p->sas_steering_wheel_angle_speed |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->sas_failure_status |= unpack_right_shift_u8(src_p[3], 7u, 0x80u);
    dst_p->sas_calibration_status |= unpack_right_shift_u8(src_p[3], 6u, 0x40u);
    reserved_1_sas = 0u;
    reserved_1_sas |= unpack_right_shift_u8(src_p[3], 0u, 0x3fu);

    if ((reserved_1_sas & (1u << 5)) != 0u) {
        reserved_1_sas |= 0xc0u;
    }

    dst_p->reserved_1_sas = (int8_t)reserved_1_sas;
    dst_p->sas_status_message_counter |= unpack_right_shift_u8(src_p[4], 4u, 0xf0u);
    sas_status_checksum = 0u;
    sas_status_checksum |= unpack_right_shift_u8(src_p[4], 0u, 0x0fu);

    if ((sas_status_checksum & (1u << 3)) != 0u) {
        sas_status_checksum |= 0xf0u;
    }

    dst_p->sas_status_checksum = (int8_t)sas_status_checksum;
    dst_p->reserved_2_sas |= unpack_left_shift_u32(src_p[5], 16u, 0xffu);
    dst_p->reserved_2_sas |= unpack_left_shift_u32(src_p[6], 8u, 0xffu);
    dst_p->reserved_2_sas |= unpack_right_shift_u32(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_sas_status_sas_steering_wheel_angle_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double a27_sas_status_sas_steering_wheel_angle_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool a27_sas_status_sas_steering_wheel_angle_is_in_range(int16_t value)
{
    return ((value >= -7800) && (value <= 7799));
}

uint8_t a27_sas_status_sas_steering_wheel_angle_speed_encode(double value)
{
    return (uint8_t)(value / 4.0);
}

double a27_sas_status_sas_steering_wheel_angle_speed_decode(uint8_t value)
{
    return ((double)value * 4.0);
}

bool a27_sas_status_sas_steering_wheel_angle_speed_is_in_range(uint8_t value)
{
    return (value <= 254u);
}

uint8_t a27_sas_status_sas_failure_status_encode(double value)
{
    return (uint8_t)(value);
}

double a27_sas_status_sas_failure_status_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_sas_status_sas_failure_status_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t a27_sas_status_sas_calibration_status_encode(double value)
{
    return (uint8_t)(value);
}

double a27_sas_status_sas_calibration_status_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_sas_status_sas_calibration_status_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int8_t a27_sas_status_reserved_1_sas_encode(double value)
{
    return (int8_t)(value);
}

double a27_sas_status_reserved_1_sas_decode(int8_t value)
{
    return ((double)value);
}

bool a27_sas_status_reserved_1_sas_is_in_range(int8_t value)
{
    return ((value >= -32) && (value <= 31));
}

uint8_t a27_sas_status_sas_status_message_counter_encode(double value)
{
    return (uint8_t)(value);
}

double a27_sas_status_sas_status_message_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_sas_status_sas_status_message_counter_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int8_t a27_sas_status_sas_status_checksum_encode(double value)
{
    return (int8_t)(value);
}

double a27_sas_status_sas_status_checksum_decode(int8_t value)
{
    return ((double)value);
}

bool a27_sas_status_sas_status_checksum_is_in_range(int8_t value)
{
    return ((value >= -8) && (value <= 7));
}

uint32_t a27_sas_status_reserved_2_sas_encode(double value)
{
    return (uint32_t)(value);
}

double a27_sas_status_reserved_2_sas_decode(uint32_t value)
{
    return ((double)value);
}

bool a27_sas_status_reserved_2_sas_is_in_range(uint32_t value)
{
    return (value <= 16777215u);
}

int a27_mslnstr_cluster1_pack(
    uint8_t *dst_p,
    const struct a27_mslnstr_cluster1_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_left_shift_u16(src_p->sig_vehicle_speed, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->sig_vehicle_speed, 8u, 0xffu);

    return (2);
}

int a27_mslnstr_cluster1_unpack(
    struct a27_mslnstr_cluster1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->sig_vehicle_speed |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    dst_p->sig_vehicle_speed |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);

    return (0);
}

uint16_t a27_mslnstr_cluster1_sig_vehicle_speed_encode(double value)
{
    return (uint16_t)(value);
}

double a27_mslnstr_cluster1_sig_vehicle_speed_decode(uint16_t value)
{
    return ((double)value);
}

bool a27_mslnstr_cluster1_sig_vehicle_speed_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_mcur_request_2_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcur_request_2_t *src_p,
    size_t size)
{
    uint16_t vcu_mcu_speed_limit_forward;
    uint16_t vcu_mcu_speed_limit_reverse;
    uint16_t vcu_mcu_tor_current_regen_limit;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    vcu_mcu_tor_current_regen_limit = (uint16_t)src_p->vcu_mcu_tor_current_regen_limit;
    dst_p[0] |= pack_left_shift_u16(vcu_mcu_tor_current_regen_limit, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(vcu_mcu_tor_current_regen_limit, 8u, 0xffu);
    vcu_mcu_speed_limit_forward = (uint16_t)src_p->vcu_mcu_speed_limit_forward;
    dst_p[2] |= pack_left_shift_u16(vcu_mcu_speed_limit_forward, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(vcu_mcu_speed_limit_forward, 8u, 0xffu);
    vcu_mcu_speed_limit_reverse = (uint16_t)src_p->vcu_mcu_speed_limit_reverse;
    dst_p[4] |= pack_left_shift_u16(vcu_mcu_speed_limit_reverse, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(vcu_mcu_speed_limit_reverse, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->vcu_mcu_seq, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->vcu_mcu_cs, 0u, 0xffu);

    return (8);
}

int a27_vcu_mcur_request_2_unpack(
    struct a27_vcu_mcur_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t vcu_mcu_speed_limit_forward;
    uint16_t vcu_mcu_speed_limit_reverse;
    uint16_t vcu_mcu_tor_current_regen_limit;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    vcu_mcu_tor_current_regen_limit = 0u;
    vcu_mcu_tor_current_regen_limit |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    vcu_mcu_tor_current_regen_limit |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->vcu_mcu_tor_current_regen_limit = (int16_t)vcu_mcu_tor_current_regen_limit;
    vcu_mcu_speed_limit_forward = 0u;
    vcu_mcu_speed_limit_forward |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    vcu_mcu_speed_limit_forward |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->vcu_mcu_speed_limit_forward = (int16_t)vcu_mcu_speed_limit_forward;
    vcu_mcu_speed_limit_reverse = 0u;
    vcu_mcu_speed_limit_reverse |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    vcu_mcu_speed_limit_reverse |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->vcu_mcu_speed_limit_reverse = (int16_t)vcu_mcu_speed_limit_reverse;
    dst_p->vcu_mcu_seq |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->vcu_mcu_cs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_encode(double value)
{
    return (int16_t)(value);
}

double a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_decode(int16_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_encode(double value)
{
    return (int16_t)(value);
}

double a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_decode(int16_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcur_request_2_vcu_mcu_seq_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_2_vcu_mcu_seq_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_2_vcu_mcu_seq_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcur_request_2_vcu_mcu_cs_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_2_vcu_mcu_cs_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_2_vcu_mcu_cs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_mcur_request_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcur_request_1_t *src_p,
    size_t size)
{
    uint16_t vcu_torq_current_traction_limit;
    uint16_t vcu_torque_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    vcu_torque_request = (uint16_t)src_p->vcu_torque_request;
    dst_p[0] |= pack_left_shift_u16(vcu_torque_request, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(vcu_torque_request, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(src_p->vcu_torque_request_control_word, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->vcu_ctr_motor_rl_dir, 0u, 0xffu);
    vcu_torq_current_traction_limit = (uint16_t)src_p->vcu_torq_current_traction_limit;
    dst_p[4] |= pack_left_shift_u16(vcu_torq_current_traction_limit, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(vcu_torq_current_traction_limit, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->vcu_mcu_seq, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->vcu_mcu_cs, 0u, 0xffu);

    return (8);
}

int a27_vcu_mcur_request_1_unpack(
    struct a27_vcu_mcur_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t vcu_torq_current_traction_limit;
    uint16_t vcu_torque_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    vcu_torque_request = 0u;
    vcu_torque_request |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    vcu_torque_request |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->vcu_torque_request = (int16_t)vcu_torque_request;
    dst_p->vcu_torque_request_control_word |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->vcu_ctr_motor_rl_dir |= unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    vcu_torq_current_traction_limit = 0u;
    vcu_torq_current_traction_limit |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    vcu_torq_current_traction_limit |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->vcu_torq_current_traction_limit = (int16_t)vcu_torq_current_traction_limit;
    dst_p->vcu_mcu_seq |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->vcu_mcu_cs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_mcur_request_1_vcu_torque_request_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcur_request_1_vcu_torque_request_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcur_request_1_vcu_torque_request_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcur_request_1_vcu_torque_request_control_word_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_1_vcu_torque_request_control_word_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value)
{
    return (value <= 5u);
}

uint8_t a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_is_in_range(uint8_t value)
{
    return (value <= 5u);
}

int16_t a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcur_request_1_vcu_mcu_seq_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_1_vcu_mcu_seq_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_1_vcu_mcu_seq_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcur_request_1_vcu_mcu_cs_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcur_request_1_vcu_mcu_cs_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcur_request_1_vcu_mcu_cs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_mcul_torque_feedback_pack(
    uint8_t *dst_p,
    const struct a27_mcul_torque_feedback_t *src_p,
    size_t size)
{
    uint16_t dc_link_current;
    uint16_t speed_measured;
    uint16_t torque_current_measured;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    torque_current_measured = (uint16_t)src_p->torque_current_measured;
    dst_p[0] |= pack_left_shift_u16(torque_current_measured, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(torque_current_measured, 8u, 0xffu);
    speed_measured = (uint16_t)src_p->speed_measured;
    dst_p[2] |= pack_left_shift_u16(speed_measured, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(speed_measured, 8u, 0xffu);
    dc_link_current = (uint16_t)src_p->dc_link_current;
    dst_p[4] |= pack_left_shift_u16(dc_link_current, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(dc_link_current, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->seq_torque, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->cs_torque, 0u, 0xffu);

    return (8);
}

int a27_mcul_torque_feedback_unpack(
    struct a27_mcul_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t dc_link_current;
    uint16_t speed_measured;
    uint16_t torque_current_measured;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    torque_current_measured = 0u;
    torque_current_measured |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    torque_current_measured |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->torque_current_measured = (int16_t)torque_current_measured;
    speed_measured = 0u;
    speed_measured |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    speed_measured |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->speed_measured = (int16_t)speed_measured;
    dc_link_current = 0u;
    dc_link_current |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dc_link_current |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->dc_link_current = (int16_t)dc_link_current;
    dst_p->seq_torque |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->cs_torque |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_mcul_torque_feedback_torque_current_measured_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_mcul_torque_feedback_torque_current_measured_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_mcul_torque_feedback_torque_current_measured_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_mcul_torque_feedback_speed_measured_encode(double value)
{
    return (int16_t)(value);
}

double a27_mcul_torque_feedback_speed_measured_decode(int16_t value)
{
    return ((double)value);
}

bool a27_mcul_torque_feedback_speed_measured_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_mcul_torque_feedback_dc_link_current_encode(double value)
{
    return (int16_t)(value);
}

double a27_mcul_torque_feedback_dc_link_current_decode(int16_t value)
{
    return ((double)value);
}

bool a27_mcul_torque_feedback_dc_link_current_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_mcul_torque_feedback_seq_torque_encode(double value)
{
    return (uint8_t)(value);
}

double a27_mcul_torque_feedback_seq_torque_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_mcul_torque_feedback_seq_torque_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_mcul_torque_feedback_cs_torque_encode(double value)
{
    return (uint8_t)(value);
}

double a27_mcul_torque_feedback_cs_torque_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_mcul_torque_feedback_cs_torque_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_eps_status_pack(
    uint8_t *dst_p,
    const struct a27_eps_status_t *src_p,
    size_t size)
{
    uint16_t eps_actual_ste_wheel_angle;
    uint8_t eps_acutal_ste_angle_speed;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    eps_actual_ste_wheel_angle = (uint16_t)src_p->eps_actual_ste_wheel_angle;
    dst_p[0] |= pack_left_shift_u16(eps_actual_ste_wheel_angle, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(eps_actual_ste_wheel_angle, 8u, 0xffu);
    eps_acutal_ste_angle_speed = (uint8_t)src_p->eps_acutal_ste_angle_speed;
    dst_p[2] |= pack_left_shift_u8(eps_acutal_ste_angle_speed, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->eps_failure_sts, 0u, 0x01u);
    dst_p[3] |= pack_left_shift_u8(src_p->eps_calibration_sts, 1u, 0x02u);
    dst_p[3] |= pack_left_shift_u8(src_p->eps_system_status, 2u, 0x0cu);
    dst_p[3] |= pack_left_shift_u8(src_p->eps_reserved_1, 4u, 0xf0u);
    dst_p[4] |= pack_left_shift_u8(src_p->eps_fault_code, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->eps_reserved_2, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(src_p->eps_reserved_2, 8u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->eps_message_checksum, 0u, 0xffu);

    return (8);
}

int a27_eps_status_unpack(
    struct a27_eps_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t eps_actual_ste_wheel_angle;
    uint8_t eps_acutal_ste_angle_speed;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    eps_actual_ste_wheel_angle = 0u;
    eps_actual_ste_wheel_angle |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    eps_actual_ste_wheel_angle |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->eps_actual_ste_wheel_angle = (int16_t)eps_actual_ste_wheel_angle;
    eps_acutal_ste_angle_speed = 0u;
    eps_acutal_ste_angle_speed |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->eps_acutal_ste_angle_speed = (int8_t)eps_acutal_ste_angle_speed;
    dst_p->eps_failure_sts |= unpack_right_shift_u8(src_p[3], 0u, 0x01u);
    dst_p->eps_calibration_sts |= unpack_right_shift_u8(src_p[3], 1u, 0x02u);
    dst_p->eps_system_status |= unpack_right_shift_u8(src_p[3], 2u, 0x0cu);
    dst_p->eps_reserved_1 |= unpack_right_shift_u8(src_p[3], 4u, 0xf0u);
    dst_p->eps_fault_code |= unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    dst_p->eps_reserved_2 |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    dst_p->eps_reserved_2 |= unpack_left_shift_u16(src_p[6], 8u, 0xffu);
    dst_p->eps_message_checksum |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_eps_status_eps_actual_ste_wheel_angle_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double a27_eps_status_eps_actual_ste_wheel_angle_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool a27_eps_status_eps_actual_ste_wheel_angle_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int8_t a27_eps_status_eps_acutal_ste_angle_speed_encode(double value)
{
    return (int8_t)(value / 8.0);
}

double a27_eps_status_eps_acutal_ste_angle_speed_decode(int8_t value)
{
    return ((double)value * 8.0);
}

bool a27_eps_status_eps_acutal_ste_angle_speed_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_eps_status_eps_failure_sts_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_failure_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_failure_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t a27_eps_status_eps_calibration_sts_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_calibration_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_calibration_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t a27_eps_status_eps_system_status_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_system_status_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_system_status_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t a27_eps_status_eps_reserved_1_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_reserved_1_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_reserved_1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t a27_eps_status_eps_fault_code_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_fault_code_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_fault_code_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t a27_eps_status_eps_reserved_2_encode(double value)
{
    return (uint16_t)(value);
}

double a27_eps_status_eps_reserved_2_decode(uint16_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_reserved_2_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_eps_status_eps_message_checksum_encode(double value)
{
    return (uint8_t)(value);
}

double a27_eps_status_eps_message_checksum_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_eps_status_eps_message_checksum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_mcu_battery_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcu_battery_request_t *src_p,
    size_t size)
{
    uint16_t dc_link_imax_discharge;
    uint16_t dc_link_imax_recharge;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dc_link_imax_discharge = (uint16_t)src_p->dc_link_imax_discharge;
    dst_p[0] |= pack_left_shift_u16(dc_link_imax_discharge, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(dc_link_imax_discharge, 8u, 0xffu);
    dc_link_imax_recharge = (uint16_t)src_p->dc_link_imax_recharge;
    dst_p[2] |= pack_left_shift_u16(dc_link_imax_recharge, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(dc_link_imax_recharge, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(src_p->dc_link_voltage_target, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->dc_link_voltage_target, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->seq_current_limits, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->cs_current_limits, 0u, 0xffu);

    return (8);
}

int a27_vcu_mcu_battery_request_unpack(
    struct a27_vcu_mcu_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t dc_link_imax_discharge;
    uint16_t dc_link_imax_recharge;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dc_link_imax_discharge = 0u;
    dc_link_imax_discharge |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    dc_link_imax_discharge |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->dc_link_imax_discharge = (int16_t)dc_link_imax_discharge;
    dc_link_imax_recharge = 0u;
    dc_link_imax_recharge |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dc_link_imax_recharge |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->dc_link_imax_recharge = (int16_t)dc_link_imax_recharge;
    dst_p->dc_link_voltage_target |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->dc_link_voltage_target |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->seq_current_limits |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->cs_current_limits |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_mcu_battery_request_dc_link_imax_discharge_encode(double value)
{
    return (int16_t)(value);
}

double a27_vcu_mcu_battery_request_dc_link_imax_discharge_decode(int16_t value)
{
    return ((double)value);
}

bool a27_vcu_mcu_battery_request_dc_link_imax_discharge_is_in_range(int16_t value)
{
    return ((value >= 0) && (value <= 1000));
}

int16_t a27_vcu_mcu_battery_request_dc_link_imax_recharge_encode(double value)
{
    return (int16_t)(value - -1000.0);
}

double a27_vcu_mcu_battery_request_dc_link_imax_recharge_decode(int16_t value)
{
    return ((double)value + -1000.0);
}

bool a27_vcu_mcu_battery_request_dc_link_imax_recharge_is_in_range(int16_t value)
{
    return ((value >= 0) && (value <= 1000));
}

uint16_t a27_vcu_mcu_battery_request_dc_link_voltage_target_encode(double value)
{
    return (uint16_t)(value / 0.0625);
}

double a27_vcu_mcu_battery_request_dc_link_voltage_target_decode(uint16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcu_battery_request_dc_link_voltage_target_is_in_range(uint16_t value)
{
    return (value <= 16000u);
}

uint8_t a27_vcu_mcu_battery_request_seq_current_limits_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcu_battery_request_seq_current_limits_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcu_battery_request_seq_current_limits_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcu_battery_request_cs_current_limits_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcu_battery_request_cs_current_limits_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcu_battery_request_cs_current_limits_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_mcul_request_2_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcul_request_2_t *src_p,
    size_t size)
{
    uint16_t vcu_mcu_speed_limit_forward;
    uint16_t vcu_mcu_speed_limit_reverse;
    uint16_t vcu_mcu_tor_current_regen_limit;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    vcu_mcu_tor_current_regen_limit = (uint16_t)src_p->vcu_mcu_tor_current_regen_limit;
    dst_p[0] |= pack_left_shift_u16(vcu_mcu_tor_current_regen_limit, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(vcu_mcu_tor_current_regen_limit, 8u, 0xffu);
    vcu_mcu_speed_limit_forward = (uint16_t)src_p->vcu_mcu_speed_limit_forward;
    dst_p[2] |= pack_left_shift_u16(vcu_mcu_speed_limit_forward, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(vcu_mcu_speed_limit_forward, 8u, 0xffu);
    vcu_mcu_speed_limit_reverse = (uint16_t)src_p->vcu_mcu_speed_limit_reverse;
    dst_p[4] |= pack_left_shift_u16(vcu_mcu_speed_limit_reverse, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(vcu_mcu_speed_limit_reverse, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->vcu_mcu_seq, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->vcu_mcu_cs, 0u, 0xffu);

    return (8);
}

int a27_vcu_mcul_request_2_unpack(
    struct a27_vcu_mcul_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t vcu_mcu_speed_limit_forward;
    uint16_t vcu_mcu_speed_limit_reverse;
    uint16_t vcu_mcu_tor_current_regen_limit;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    vcu_mcu_tor_current_regen_limit = 0u;
    vcu_mcu_tor_current_regen_limit |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    vcu_mcu_tor_current_regen_limit |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->vcu_mcu_tor_current_regen_limit = (int16_t)vcu_mcu_tor_current_regen_limit;
    vcu_mcu_speed_limit_forward = 0u;
    vcu_mcu_speed_limit_forward |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    vcu_mcu_speed_limit_forward |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->vcu_mcu_speed_limit_forward = (int16_t)vcu_mcu_speed_limit_forward;
    vcu_mcu_speed_limit_reverse = 0u;
    vcu_mcu_speed_limit_reverse |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    vcu_mcu_speed_limit_reverse |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->vcu_mcu_speed_limit_reverse = (int16_t)vcu_mcu_speed_limit_reverse;
    dst_p->vcu_mcu_seq |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->vcu_mcu_cs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_encode(double value)
{
    return (int16_t)(value);
}

double a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_decode(int16_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_encode(double value)
{
    return (int16_t)(value);
}

double a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_decode(int16_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcul_request_2_vcu_mcu_seq_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_2_vcu_mcu_seq_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_2_vcu_mcu_seq_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcul_request_2_vcu_mcu_cs_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_2_vcu_mcu_cs_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_2_vcu_mcu_cs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_mcul_request_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcul_request_1_t *src_p,
    size_t size)
{
    uint16_t vcu_torq_current_traction_limit;
    uint16_t vcu_torque_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    vcu_torque_request = (uint16_t)src_p->vcu_torque_request;
    dst_p[0] |= pack_left_shift_u16(vcu_torque_request, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(vcu_torque_request, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(src_p->vcu_torque_request_control_word, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->vcu_ctr_motor_rl_dir, 0u, 0xffu);
    vcu_torq_current_traction_limit = (uint16_t)src_p->vcu_torq_current_traction_limit;
    dst_p[4] |= pack_left_shift_u16(vcu_torq_current_traction_limit, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(vcu_torq_current_traction_limit, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->vcu_mcu_seq, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->vcu_mcu_cs, 0u, 0xffu);

    return (8);
}

int a27_vcu_mcul_request_1_unpack(
    struct a27_vcu_mcul_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t vcu_torq_current_traction_limit;
    uint16_t vcu_torque_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    vcu_torque_request = 0u;
    vcu_torque_request |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    vcu_torque_request |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->vcu_torque_request = (int16_t)vcu_torque_request;
    dst_p->vcu_torque_request_control_word |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->vcu_ctr_motor_rl_dir |= unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    vcu_torq_current_traction_limit = 0u;
    vcu_torq_current_traction_limit |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    vcu_torq_current_traction_limit |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->vcu_torq_current_traction_limit = (int16_t)vcu_torq_current_traction_limit;
    dst_p->vcu_mcu_seq |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->vcu_mcu_cs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_mcul_request_1_vcu_torque_request_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcul_request_1_vcu_torque_request_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcul_request_1_vcu_torque_request_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcul_request_1_vcu_torque_request_control_word_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_1_vcu_torque_request_control_word_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value)
{
    return (value <= 5u);
}

uint8_t a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_is_in_range(uint8_t value)
{
    return (value <= 5u);
}

int16_t a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcul_request_1_vcu_mcu_seq_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_1_vcu_mcu_seq_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_1_vcu_mcu_seq_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_mcul_request_1_vcu_mcu_cs_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_mcul_request_1_vcu_mcu_cs_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_mcul_request_1_vcu_mcu_cs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_ibc_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_ibc_request_t *src_p,
    size_t size)
{
    uint16_t vcu_break_pressure_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u64(src_p->reserved_1, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u64(src_p->reserved_1, 8u, 0xffu);
    dst_p[2] |= pack_right_shift_u64(src_p->reserved_1, 16u, 0xffu);
    dst_p[3] |= pack_right_shift_u64(src_p->reserved_1, 24u, 0xffu);
    dst_p[4] |= pack_right_shift_u64(src_p->reserved_1, 32u, 0xffu);
    vcu_break_pressure_request = (uint16_t)src_p->vcu_break_pressure_request;
    dst_p[5] |= pack_left_shift_u16(vcu_break_pressure_request, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(vcu_break_pressure_request, 8u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->vcu_break_pressure_request_value, 0u, 0x01u);
    dst_p[7] |= pack_left_shift_u8(src_p->reserved_2, 1u, 0xfeu);

    return (8);
}

int a27_vcu_ibc_request_unpack(
    struct a27_vcu_ibc_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t vcu_break_pressure_request;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->reserved_1 |= unpack_right_shift_u64(src_p[0], 0u, 0xffu);
    dst_p->reserved_1 |= unpack_left_shift_u64(src_p[1], 8u, 0xffu);
    dst_p->reserved_1 |= unpack_left_shift_u64(src_p[2], 16u, 0xffu);
    dst_p->reserved_1 |= unpack_left_shift_u64(src_p[3], 24u, 0xffu);
    dst_p->reserved_1 |= unpack_left_shift_u64(src_p[4], 32u, 0xffu);
    vcu_break_pressure_request = 0u;
    vcu_break_pressure_request |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    vcu_break_pressure_request |= unpack_left_shift_u16(src_p[6], 8u, 0xffu);
    dst_p->vcu_break_pressure_request = (int16_t)vcu_break_pressure_request;
    dst_p->vcu_break_pressure_request_value |= unpack_right_shift_u8(src_p[7], 0u, 0x01u);
    dst_p->reserved_2 |= unpack_right_shift_u8(src_p[7], 1u, 0xfeu);

    return (0);
}

uint64_t a27_vcu_ibc_request_reserved_1_encode(double value)
{
    return (uint64_t)(value);
}

double a27_vcu_ibc_request_reserved_1_decode(uint64_t value)
{
    return ((double)value);
}

bool a27_vcu_ibc_request_reserved_1_is_in_range(uint64_t value)
{
    return (value <= 1099511627775ull);
}

int16_t a27_vcu_ibc_request_vcu_break_pressure_request_encode(double value)
{
    return (int16_t)(value / 0.01);
}

double a27_vcu_ibc_request_vcu_break_pressure_request_decode(int16_t value)
{
    return ((double)value * 0.01);
}

bool a27_vcu_ibc_request_vcu_break_pressure_request_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_ibc_request_vcu_break_pressure_request_value_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_ibc_request_vcu_break_pressure_request_value_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_ibc_request_vcu_break_pressure_request_value_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t a27_vcu_ibc_request_reserved_2_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_ibc_request_reserved_2_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_ibc_request_reserved_2_is_in_range(uint8_t value)
{
    return (value <= 127u);
}

int a27_vcu_eps_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_eps_request_t *src_p,
    size_t size)
{
    uint16_t ccu_eps_angle;
    uint8_t ccu_eps_speed;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    ccu_eps_angle = (uint16_t)src_p->ccu_eps_angle;
    dst_p[0] |= pack_left_shift_u16(ccu_eps_angle, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(ccu_eps_angle, 8u, 0xffu);
    ccu_eps_speed = (uint8_t)src_p->ccu_eps_speed;
    dst_p[2] |= pack_left_shift_u8(ccu_eps_speed, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u32(src_p->reserved, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u32(src_p->reserved, 8u, 0xffu);
    dst_p[5] |= pack_right_shift_u32(src_p->reserved, 16u, 0xffu);
    dst_p[6] |= pack_right_shift_u32(src_p->reserved, 24u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->ccu_eps_checksum, 0u, 0xffu);

    return (8);
}

int a27_vcu_eps_request_unpack(
    struct a27_vcu_eps_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t ccu_eps_angle;
    uint8_t ccu_eps_speed;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    ccu_eps_angle = 0u;
    ccu_eps_angle |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    ccu_eps_angle |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->ccu_eps_angle = (int16_t)ccu_eps_angle;
    ccu_eps_speed = 0u;
    ccu_eps_speed |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->ccu_eps_speed = (int8_t)ccu_eps_speed;
    dst_p->reserved |= unpack_right_shift_u32(src_p[3], 0u, 0xffu);
    dst_p->reserved |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
    dst_p->reserved |= unpack_left_shift_u32(src_p[5], 16u, 0xffu);
    dst_p->reserved |= unpack_left_shift_u32(src_p[6], 24u, 0xffu);
    dst_p->ccu_eps_checksum |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_vcu_eps_request_ccu_eps_angle_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double a27_vcu_eps_request_ccu_eps_angle_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool a27_vcu_eps_request_ccu_eps_angle_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int8_t a27_vcu_eps_request_ccu_eps_speed_encode(double value)
{
    return (int8_t)(value / 8.0);
}

double a27_vcu_eps_request_ccu_eps_speed_decode(int8_t value)
{
    return ((double)value * 8.0);
}

bool a27_vcu_eps_request_ccu_eps_speed_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

uint32_t a27_vcu_eps_request_reserved_encode(double value)
{
    return (uint32_t)(value);
}

double a27_vcu_eps_request_reserved_decode(uint32_t value)
{
    return ((double)value);
}

bool a27_vcu_eps_request_reserved_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_vcu_eps_request_ccu_eps_checksum_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_eps_request_ccu_eps_checksum_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_eps_request_ccu_eps_checksum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int a27_vcu_status_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_status_1_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->reserved_1, 0u, 0x07u);
    dst_p[0] |= pack_left_shift_u8(src_p->vcu_ignition_ststus, 3u, 0x18u);
    dst_p[0] |= pack_left_shift_u8(src_p->reserved_2, 5u, 0xe0u);
    dst_p[1] |= pack_left_shift_u16(src_p->reserved_3, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(src_p->reserved_3, 8u, 0x0fu);
    dst_p[2] |= pack_left_shift_u16(src_p->vcu_vehicle_speed, 4u, 0xf0u);
    dst_p[3] |= pack_right_shift_u16(src_p->vcu_vehicle_speed, 4u, 0x1fu);
    dst_p[3] |= pack_left_shift_u8(src_p->reserved_4, 5u, 0xe0u);
    dst_p[4] |= pack_left_shift_u32(src_p->reserved_5, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u32(src_p->reserved_5, 8u, 0xffu);
    dst_p[6] |= pack_right_shift_u32(src_p->reserved_5, 16u, 0xffu);
    dst_p[7] |= pack_right_shift_u32(src_p->reserved_5, 24u, 0xffu);

    return (8);
}

int a27_vcu_status_1_unpack(
    struct a27_vcu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->reserved_1 |= unpack_right_shift_u8(src_p[0], 0u, 0x07u);
    dst_p->vcu_ignition_ststus |= unpack_right_shift_u8(src_p[0], 3u, 0x18u);
    dst_p->reserved_2 |= unpack_right_shift_u8(src_p[0], 5u, 0xe0u);
    dst_p->reserved_3 |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    dst_p->reserved_3 |= unpack_left_shift_u16(src_p[2], 8u, 0x0fu);
    dst_p->vcu_vehicle_speed |= unpack_right_shift_u16(src_p[2], 4u, 0xf0u);
    dst_p->vcu_vehicle_speed |= unpack_left_shift_u16(src_p[3], 4u, 0x1fu);
    dst_p->reserved_4 |= unpack_right_shift_u8(src_p[3], 5u, 0xe0u);
    dst_p->reserved_5 |= unpack_right_shift_u32(src_p[4], 0u, 0xffu);
    dst_p->reserved_5 |= unpack_left_shift_u32(src_p[5], 8u, 0xffu);
    dst_p->reserved_5 |= unpack_left_shift_u32(src_p[6], 16u, 0xffu);
    dst_p->reserved_5 |= unpack_left_shift_u32(src_p[7], 24u, 0xffu);

    return (0);
}

uint8_t a27_vcu_status_1_reserved_1_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_status_1_reserved_1_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_reserved_1_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t a27_vcu_status_1_vcu_ignition_ststus_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_status_1_vcu_ignition_ststus_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_vcu_ignition_ststus_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t a27_vcu_status_1_reserved_2_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_status_1_reserved_2_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_reserved_2_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint16_t a27_vcu_status_1_reserved_3_encode(double value)
{
    return (uint16_t)(value);
}

double a27_vcu_status_1_reserved_3_decode(uint16_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_reserved_3_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t a27_vcu_status_1_vcu_vehicle_speed_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double a27_vcu_status_1_vcu_vehicle_speed_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool a27_vcu_status_1_vcu_vehicle_speed_is_in_range(uint16_t value)
{
    return (value <= 511u);
}

uint8_t a27_vcu_status_1_reserved_4_encode(double value)
{
    return (uint8_t)(value);
}

double a27_vcu_status_1_reserved_4_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_reserved_4_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint32_t a27_vcu_status_1_reserved_5_encode(double value)
{
    return (uint32_t)(value);
}

double a27_vcu_status_1_reserved_5_decode(uint32_t value)
{
    return ((double)value);
}

bool a27_vcu_status_1_reserved_5_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int a27_mcur_torque_feedback_pack(
    uint8_t *dst_p,
    const struct a27_mcur_torque_feedback_t *src_p,
    size_t size)
{
    uint16_t dc_link_current;
    uint16_t speed_measured;
    uint16_t torque_current_measured;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    torque_current_measured = (uint16_t)src_p->torque_current_measured;
    dst_p[0] |= pack_left_shift_u16(torque_current_measured, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(torque_current_measured, 8u, 0xffu);
    speed_measured = (uint16_t)src_p->speed_measured;
    dst_p[2] |= pack_left_shift_u16(speed_measured, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(speed_measured, 8u, 0xffu);
    dc_link_current = (uint16_t)src_p->dc_link_current;
    dst_p[4] |= pack_left_shift_u16(dc_link_current, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(dc_link_current, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->seq_torque, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->cs_torque, 0u, 0xffu);

    return (8);
}

int a27_mcur_torque_feedback_unpack(
    struct a27_mcur_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t dc_link_current;
    uint16_t speed_measured;
    uint16_t torque_current_measured;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    torque_current_measured = 0u;
    torque_current_measured |= unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    torque_current_measured |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->torque_current_measured = (int16_t)torque_current_measured;
    speed_measured = 0u;
    speed_measured |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    speed_measured |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->speed_measured = (int16_t)speed_measured;
    dc_link_current = 0u;
    dc_link_current |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dc_link_current |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->dc_link_current = (int16_t)dc_link_current;
    dst_p->seq_torque |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->cs_torque |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

int16_t a27_mcur_torque_feedback_torque_current_measured_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double a27_mcur_torque_feedback_torque_current_measured_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool a27_mcur_torque_feedback_torque_current_measured_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_mcur_torque_feedback_speed_measured_encode(double value)
{
    return (int16_t)(value);
}

double a27_mcur_torque_feedback_speed_measured_decode(int16_t value)
{
    return ((double)value);
}

bool a27_mcur_torque_feedback_speed_measured_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t a27_mcur_torque_feedback_dc_link_current_encode(double value)
{
    return (int16_t)(value);
}

double a27_mcur_torque_feedback_dc_link_current_decode(int16_t value)
{
    return ((double)value);
}

bool a27_mcur_torque_feedback_dc_link_current_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_mcur_torque_feedback_seq_torque_encode(double value)
{
    return (uint8_t)(value);
}

double a27_mcur_torque_feedback_seq_torque_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_mcur_torque_feedback_seq_torque_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t a27_mcur_torque_feedback_cs_torque_encode(double value)
{
    return (uint8_t)(value);
}

double a27_mcur_torque_feedback_cs_torque_decode(uint8_t value)
{
    return ((double)value);
}

bool a27_mcur_torque_feedback_cs_torque_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}
