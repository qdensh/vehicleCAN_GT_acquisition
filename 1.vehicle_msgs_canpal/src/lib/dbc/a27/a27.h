/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.14.0 Sun Mar 31 15:29:41 2019.
 */

#ifndef A27_H
#define A27_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define A27_NEW_MESSAGE_16_FRAME_ID (0x01u)
#define A27_NEW_MESSAGE_15_FRAME_ID (0x00u)
#define A27_TBOX_VEHICLE_REQUEST_STATUS_FRAME_ID (0x100u)
#define A27_SAS_STATUS_FRAME_ID (0x70u)
#define A27_MSLNSTR_CLUSTER1_FRAME_ID (0x110u)
#define A27_VCU_MCUR_REQUEST_2_FRAME_ID (0x181u)
#define A27_VCU_MCUR_REQUEST_1_FRAME_ID (0x180u)
#define A27_MCUL_TORQUE_FEEDBACK_FRAME_ID (0x178u)
#define A27_EPS_STATUS_FRAME_ID (0x144u)
#define A27_VCU_MCU_BATTERY_REQUEST_FRAME_ID (0xd0u)
#define A27_VCU_MCUL_REQUEST_2_FRAME_ID (0x171u)
#define A27_VCU_MCUL_REQUEST_1_FRAME_ID (0x170u)
#define A27_VCU_IBC_REQUEST_FRAME_ID (0x154u)
#define A27_VCU_EPS_REQUEST_FRAME_ID (0x151u)
#define A27_VCU_STATUS_1_FRAME_ID (0x51u)
#define A27_MCUR_TORQUE_FEEDBACK_FRAME_ID (0x188u)

/**
 * Signals in message New_Message_16.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_new_message_16_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t new_signal_103;
};

/**
 * Signals in message New_Message_15.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_new_message_15_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t new_signal_102;
};

/**
 * Signals in message TBOX_Vehicle_Request_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_tbox_vehicle_request_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_shift_level_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1_tbox;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tbox_drive_mode_request;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tbox_steer_wheel_angle_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_left_turn_light_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_right_turn_light_request;

    /**
     * Range: 0..3 (0..3 bit)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_hazard_light_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t reserved_2_tbox;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_low_beam_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t reserved_3_tbox;

    /**
     * Range: 0..510 (0..51 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t tbox_target_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ebrake_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t reserved_tbox;
};

/**
 * Signals in message SAS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_sas_status_t {
    /**
     * Range: -7800..7799 (-780..779.9 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t sas_steering_wheel_angle;

    /**
     * Range: 0..254 (0..1016 -)
     * Scale: 4
     * Offset: 0
     */
    uint8_t sas_steering_wheel_angle_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_failure_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_calibration_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t reserved_1_sas;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_status_message_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t sas_status_checksum;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved_2_sas;
};

/**
 * Signals in message mslnstrCluster1.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_mslnstr_cluster1_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sig_vehicle_speed;
};

/**
 * Signals in message VCU_MCUR_Request_2.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_mcur_request_2_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_mcu_tor_current_regen_limit;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcu_speed_limit_forward;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcu_speed_limit_reverse;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_seq;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_cs;
};

/**
 * Signals in message VCU_MCUR_Request_1.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_mcur_request_1_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_request;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_torque_request_control_word;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ctr_motor_rl_dir;

    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torq_current_traction_limit;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_seq;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_cs;
};

/**
 * Signals in message MCUL_Torque_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_mcul_torque_feedback_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 Nm)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_measured;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_measured;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t dc_link_current;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seq_torque;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_torque;
};

/**
 * Signals in message EPS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_eps_status_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eps_actual_ste_wheel_angle;

    /**
     * Range: -128..127 (-1024..1016 -)
     * Scale: 8
     * Offset: 0
     */
    int8_t eps_acutal_ste_angle_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_failure_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_calibration_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_system_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_reserved_1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_fault_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t eps_reserved_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_message_checksum;
};

/**
 * Signals in message VCU_MCU_Battery_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_mcu_battery_request_t {
    /**
     * Range: 0..1000 (0..1000 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t dc_link_imax_discharge;

    /**
     * Range: 0..1000 (-1000..0 -)
     * Scale: 1
     * Offset: -1000
     */
    int16_t dc_link_imax_recharge;

    /**
     * Range: 0..16000 (0..1000 -)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t dc_link_voltage_target;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seq_current_limits;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_current_limits;
};

/**
 * Signals in message VCU_MCUL_Request_2.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_mcul_request_2_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_mcu_tor_current_regen_limit;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcu_speed_limit_forward;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcu_speed_limit_reverse;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_seq;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_cs;
};

/**
 * Signals in message VCU_MCUL_Request_1.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_mcul_request_1_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_request;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_torque_request_control_word;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ctr_motor_rl_dir;

    /**
     * Range: -32768..32767 (-2048..2047.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torq_current_traction_limit;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_seq;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_cs;
};

/**
 * Signals in message VCU_IBC_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_ibc_request_t {
    /**
     * Range: 0..1099511627775 (0..1099511627775 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved_1;

    /**
     * Range: -32768..32767 (-327.68..327.67 -)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t vcu_break_pressure_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_break_pressure_request_value;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;
};

/**
 * Signals in message VCU_EPS_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_eps_request_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ccu_eps_angle;

    /**
     * Range: -128..127 (-1024..1016 -)
     * Scale: 8
     * Offset: 0
     */
    int8_t ccu_eps_speed;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccu_eps_checksum;
};

/**
 * Signals in message VCU_Status_1.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_vcu_status_1_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ignition_ststus;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved_3;

    /**
     * Range: 0..511 (0..51.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_vehicle_speed;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_4;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved_5;
};

/**
 * Signals in message MCUR_Torque_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct a27_mcur_torque_feedback_t {
    /**
     * Range: -32768..32767 (-2048..2047.9375 Nm)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_measured;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_measured;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t dc_link_current;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seq_torque;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_torque;
};

/**
 * Pack message New_Message_16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_new_message_16_pack(
    uint8_t *dst_p,
    const struct a27_new_message_16_t *src_p,
    size_t size);

/**
 * Unpack message New_Message_16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_new_message_16_unpack(
    struct a27_new_message_16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_new_message_16_new_signal_103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_new_message_16_new_signal_103_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_new_message_16_new_signal_103_is_in_range(uint8_t value);

/**
 * Pack message New_Message_15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_new_message_15_pack(
    uint8_t *dst_p,
    const struct a27_new_message_15_t *src_p,
    size_t size);

/**
 * Unpack message New_Message_15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_new_message_15_unpack(
    struct a27_new_message_15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_new_message_15_new_signal_102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_new_message_15_new_signal_102_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_new_message_15_new_signal_102_is_in_range(uint8_t value);

/**
 * Pack message TBOX_Vehicle_Request_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_tbox_vehicle_request_status_pack(
    uint8_t *dst_p,
    const struct a27_tbox_vehicle_request_status_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_Vehicle_Request_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_tbox_vehicle_request_status_unpack(
    struct a27_tbox_vehicle_request_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_shift_level_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_shift_level_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_shift_level_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_reserved_1_tbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_reserved_1_tbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_reserved_1_tbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_tbox_vehicle_request_status_tbox_drive_mode_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_drive_mode_request_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_drive_mode_request_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_steer_wheel_angle_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_left_turn_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_left_turn_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_left_turn_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_right_turn_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_right_turn_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_right_turn_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_hazard_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_hazard_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_hazard_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_tbox_vehicle_request_status_reserved_2_tbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_reserved_2_tbox_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_reserved_2_tbox_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_low_beam_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_low_beam_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_low_beam_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_tbox_vehicle_request_status_reserved_3_tbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_reserved_3_tbox_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_reserved_3_tbox_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_tbox_vehicle_request_status_tbox_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_tbox_vehicle_request_status_tbox_ebrake_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_tbox_ebrake_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_tbox_ebrake_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_tbox_vehicle_request_status_reserved_tbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_tbox_vehicle_request_status_reserved_tbox_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_tbox_vehicle_request_status_reserved_tbox_is_in_range(int16_t value);

/**
 * Pack message SAS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_sas_status_pack(
    uint8_t *dst_p,
    const struct a27_sas_status_t *src_p,
    size_t size);

/**
 * Unpack message SAS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_sas_status_unpack(
    struct a27_sas_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_sas_status_sas_steering_wheel_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_steering_wheel_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_steering_wheel_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_sas_status_sas_steering_wheel_angle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_steering_wheel_angle_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_steering_wheel_angle_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_sas_status_sas_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_sas_status_sas_calibration_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_calibration_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_calibration_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_sas_status_reserved_1_sas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_reserved_1_sas_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_reserved_1_sas_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_sas_status_sas_status_message_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_status_message_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_status_message_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_sas_status_sas_status_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_sas_status_checksum_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_sas_status_checksum_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t a27_sas_status_reserved_2_sas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_sas_status_reserved_2_sas_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_sas_status_reserved_2_sas_is_in_range(uint32_t value);

/**
 * Pack message mslnstrCluster1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_mslnstr_cluster1_pack(
    uint8_t *dst_p,
    const struct a27_mslnstr_cluster1_t *src_p,
    size_t size);

/**
 * Unpack message mslnstrCluster1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_mslnstr_cluster1_unpack(
    struct a27_mslnstr_cluster1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_mslnstr_cluster1_sig_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mslnstr_cluster1_sig_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mslnstr_cluster1_sig_vehicle_speed_is_in_range(uint16_t value);

/**
 * Pack message VCU_MCUR_Request_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_mcur_request_2_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcur_request_2_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUR_Request_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_mcur_request_2_unpack(
    struct a27_vcu_mcur_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_2_vcu_mcu_tor_current_regen_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_2_vcu_mcu_speed_limit_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_2_vcu_mcu_speed_limit_reverse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_2_vcu_mcu_seq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_2_vcu_mcu_seq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_2_vcu_mcu_seq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_2_vcu_mcu_cs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_2_vcu_mcu_cs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_2_vcu_mcu_cs_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCUR_Request_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_mcur_request_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcur_request_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUR_Request_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_mcur_request_1_unpack(
    struct a27_vcu_mcur_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcur_request_1_vcu_torque_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_1_vcu_torque_request_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_torque_request_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_ctr_motor_rl_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_torq_current_traction_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_1_vcu_mcu_seq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_mcu_seq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_mcu_seq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcur_request_1_vcu_mcu_cs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcur_request_1_vcu_mcu_cs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcur_request_1_vcu_mcu_cs_is_in_range(uint8_t value);

/**
 * Pack message MCUL_Torque_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_mcul_torque_feedback_pack(
    uint8_t *dst_p,
    const struct a27_mcul_torque_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUL_Torque_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_mcul_torque_feedback_unpack(
    struct a27_mcul_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcul_torque_feedback_torque_current_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcul_torque_feedback_torque_current_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcul_torque_feedback_torque_current_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcul_torque_feedback_speed_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcul_torque_feedback_speed_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcul_torque_feedback_speed_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcul_torque_feedback_dc_link_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcul_torque_feedback_dc_link_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcul_torque_feedback_dc_link_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_mcul_torque_feedback_seq_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcul_torque_feedback_seq_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcul_torque_feedback_seq_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_mcul_torque_feedback_cs_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcul_torque_feedback_cs_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcul_torque_feedback_cs_torque_is_in_range(uint8_t value);

/**
 * Pack message EPS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_eps_status_pack(
    uint8_t *dst_p,
    const struct a27_eps_status_t *src_p,
    size_t size);

/**
 * Unpack message EPS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_eps_status_unpack(
    struct a27_eps_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_eps_status_eps_actual_ste_wheel_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_actual_ste_wheel_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_actual_ste_wheel_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_eps_status_eps_acutal_ste_angle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_acutal_ste_angle_speed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_acutal_ste_angle_speed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_failure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_failure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_failure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_calibration_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_calibration_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_calibration_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_system_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_system_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_reserved_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_fault_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_fault_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_eps_status_eps_reserved_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_reserved_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_reserved_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_eps_status_eps_message_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_eps_status_eps_message_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_eps_status_eps_message_checksum_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCU_Battery_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_mcu_battery_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcu_battery_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCU_Battery_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_mcu_battery_request_unpack(
    struct a27_vcu_mcu_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcu_battery_request_dc_link_imax_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcu_battery_request_dc_link_imax_discharge_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcu_battery_request_dc_link_imax_discharge_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcu_battery_request_dc_link_imax_recharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcu_battery_request_dc_link_imax_recharge_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcu_battery_request_dc_link_imax_recharge_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_vcu_mcu_battery_request_dc_link_voltage_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcu_battery_request_dc_link_voltage_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcu_battery_request_dc_link_voltage_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcu_battery_request_seq_current_limits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcu_battery_request_seq_current_limits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcu_battery_request_seq_current_limits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcu_battery_request_cs_current_limits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcu_battery_request_cs_current_limits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcu_battery_request_cs_current_limits_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCUL_Request_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_mcul_request_2_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcul_request_2_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUL_Request_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_mcul_request_2_unpack(
    struct a27_vcu_mcul_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_2_vcu_mcu_tor_current_regen_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_2_vcu_mcu_speed_limit_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_2_vcu_mcu_speed_limit_reverse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_2_vcu_mcu_seq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_2_vcu_mcu_seq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_2_vcu_mcu_seq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_2_vcu_mcu_cs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_2_vcu_mcu_cs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_2_vcu_mcu_cs_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCUL_Request_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_mcul_request_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_mcul_request_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUL_Request_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_mcul_request_1_unpack(
    struct a27_vcu_mcul_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcul_request_1_vcu_torque_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_1_vcu_torque_request_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_torque_request_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_ctr_motor_rl_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_torq_current_traction_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_1_vcu_mcu_seq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_mcu_seq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_mcu_seq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_mcul_request_1_vcu_mcu_cs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_mcul_request_1_vcu_mcu_cs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_mcul_request_1_vcu_mcu_cs_is_in_range(uint8_t value);

/**
 * Pack message VCU_IBC_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_ibc_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_ibc_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_IBC_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_ibc_request_unpack(
    struct a27_vcu_ibc_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t a27_vcu_ibc_request_reserved_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_ibc_request_reserved_1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_ibc_request_reserved_1_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_ibc_request_vcu_break_pressure_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_ibc_request_vcu_break_pressure_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_ibc_request_vcu_break_pressure_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_ibc_request_vcu_break_pressure_request_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_ibc_request_vcu_break_pressure_request_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_ibc_request_vcu_break_pressure_request_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_ibc_request_reserved_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_ibc_request_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_ibc_request_reserved_2_is_in_range(uint8_t value);

/**
 * Pack message VCU_EPS_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_eps_request_pack(
    uint8_t *dst_p,
    const struct a27_vcu_eps_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_EPS_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_eps_request_unpack(
    struct a27_vcu_eps_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_vcu_eps_request_ccu_eps_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_eps_request_ccu_eps_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_eps_request_ccu_eps_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t a27_vcu_eps_request_ccu_eps_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_eps_request_ccu_eps_speed_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_eps_request_ccu_eps_speed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t a27_vcu_eps_request_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_eps_request_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_eps_request_reserved_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_eps_request_ccu_eps_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_eps_request_ccu_eps_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_eps_request_ccu_eps_checksum_is_in_range(uint8_t value);

/**
 * Pack message VCU_Status_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_vcu_status_1_pack(
    uint8_t *dst_p,
    const struct a27_vcu_status_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Status_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_vcu_status_1_unpack(
    struct a27_vcu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_status_1_reserved_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_status_1_vcu_ignition_ststus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_vcu_ignition_ststus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_vcu_ignition_ststus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_status_1_reserved_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_vcu_status_1_reserved_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_reserved_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_reserved_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t a27_vcu_status_1_vcu_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_vcu_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_vcu_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_vcu_status_1_reserved_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_reserved_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_reserved_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t a27_vcu_status_1_reserved_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_vcu_status_1_reserved_5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_vcu_status_1_reserved_5_is_in_range(uint32_t value);

/**
 * Pack message MCUR_Torque_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int a27_mcur_torque_feedback_pack(
    uint8_t *dst_p,
    const struct a27_mcur_torque_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUR_Torque_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int a27_mcur_torque_feedback_unpack(
    struct a27_mcur_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcur_torque_feedback_torque_current_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcur_torque_feedback_torque_current_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcur_torque_feedback_torque_current_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcur_torque_feedback_speed_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcur_torque_feedback_speed_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcur_torque_feedback_speed_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t a27_mcur_torque_feedback_dc_link_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcur_torque_feedback_dc_link_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcur_torque_feedback_dc_link_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_mcur_torque_feedback_seq_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcur_torque_feedback_seq_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcur_torque_feedback_seq_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t a27_mcur_torque_feedback_cs_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double a27_mcur_torque_feedback_cs_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool a27_mcur_torque_feedback_cs_torque_is_in_range(uint8_t value);

#endif
