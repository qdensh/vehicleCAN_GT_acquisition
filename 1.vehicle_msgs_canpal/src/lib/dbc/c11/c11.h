/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.14.0 Tue May 21 09:27:24 2019.
 */

#ifndef C11_H
#define C11_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define C11_TIRE_STEERING_ANGLE_FRAME_ID (0x101u)
#define C11_SASF_STATUS_FRAME_ID (0x70u)
#define C11_XL_SAS_STATUS_FRAME_ID (0x152u)
#define C11_TBOX_VEHICLE_REQUEST_STATUS_FRAME_ID (0x100u)
#define C11_IBC_STATUS_FRAME_ID (0x142u)
#define C11_EPSR_STATUS_FRAME_ID (0x145u)
#define C11_EPSF_STATUS_FRAME_ID (0x144u)
#define C11_VCU_ACTIVATE_BATTERY_REQUEST_FRAME_ID (0xd0u)
#define C11_VCU_MCUR_BATTERY_REQUEST_FRAME_ID (0x172u)
#define C11_VCU_MCUR_REQUEST_2_FRAME_ID (0x171u)
#define C11_VCU_MCUR_REQUEST_1_FRAME_ID (0x170u)
#define C11_VCU_MCUF_REQUEST_2_FRAME_ID (0x161u)
#define C11_VCU_MCUF_BATTERY_REQUEST_FRAME_ID (0x162u)
#define C11_VCU_MCUF_REQUEST_1_FRAME_ID (0x160u)
#define C11_VCU_IBC_REQUEST_FRAME_ID (0x154u)
#define C11_VCU_EPS_REQUEST_FRAME_ID (0x151u)
#define C11_VCU_STATUS_1_FRAME_ID (0x51u)
#define C11_BMS2_SYSTEM_INFO_FRAME_ID (0xb0u)
#define C11_BMS1_SYSTEM_INFO_FRAME_ID (0xa0u)
#define C11_MCUR_STATUS_FEEDBACK_FRAME_ID (0x69u)
#define C11_MCUR_TORQUE_FEEDBACK_FRAME_ID (0x20u)
#define C11_MCUF_STATUS_FEEDBACK_FRAME_ID (0x60u)
#define C11_MCUF_TORQUE_FEEDBACK_FRAME_ID (0x10u)

#define C11_VCU_STATUS_1_VCU_IGNITION_STSTUS_SLEEP_CHOICE (0u)
#define C11_VCU_STATUS_1_VCU_IGNITION_STSTUS_ON_CHOICE (1u)

#define C11_BMS2_SYSTEM_INFO_BMS2_SYS_STATUS_NORMAL______CHOICE (0u)
#define C11_BMS2_SYSTEM_INFO_BMS2_SYS_STATUS_LEVEL_1__FAULT_________________CHOICE (1u)
#define C11_BMS2_SYSTEM_INFO_BMS2_SYS_STATUS_LEVEL_2__FAULT__________CHOICE (2u)
#define C11_BMS2_SYSTEM_INFO_BMS2_SYS_STATUS_LEVEL_3__FAULT__________CHOICE (3u)

#define C11_BMS2_SYSTEM_INFO_BMS2_CHARGE_STATUS_UNCHARGE_CHOICE (0u)
#define C11_BMS2_SYSTEM_INFO_BMS2_CHARGE_STATUS_AC_SLOW_CHARGING_________CHOICE (1u)

#define C11_BMS2_SYSTEM_INFO_BMS2_DISCHARGING_MOS_STATUS_OPEN_______CHOICE (0u)
#define C11_BMS2_SYSTEM_INFO_BMS2_DISCHARGING_MOS_STATUS_CLOSE______CHOICE (1u)

#define C11_BMS2_SYSTEM_INFO_BMS2_CHARGING_MOS_STATUS_OPEN_______CHOICE (0u)
#define C11_BMS2_SYSTEM_INFO_BMS2_CHARGING_MOS_STATUS_CLOSE______CHOICE (1u)

#define C11_BMS2_SYSTEM_INFO_BMS2_PRECHARGE_SIGNAL_STATUS__________0_CHOICE (0u)
#define C11_BMS2_SYSTEM_INFO_BMS2_PRECHARGE_SIGNAL_STATUS________CHOICE (1u)
#define C11_BMS2_SYSTEM_INFO_BMS2_PRECHARGE_SIGNAL_STATUS_____________CHOICE (2u)
#define C11_BMS2_SYSTEM_INFO_BMS2_PRECHARGE_SIGNAL_STATUS__________3_CHOICE (3u)

#define C11_BMS1_SYSTEM_INFO_BMS1_SYS_STATUS_NORMAL______CHOICE (0u)
#define C11_BMS1_SYSTEM_INFO_BMS1_SYS_STATUS_LEVEL_1__FAULT_________________CHOICE (1u)
#define C11_BMS1_SYSTEM_INFO_BMS1_SYS_STATUS_LEVEL_2__FAULT__________CHOICE (2u)
#define C11_BMS1_SYSTEM_INFO_BMS1_SYS_STATUS_LEVEL_3__FAULT__________CHOICE (3u)

#define C11_BMS1_SYSTEM_INFO_BMS1_CHARGE_STATUS_UNCHARGE_CHOICE (0u)
#define C11_BMS1_SYSTEM_INFO_BMS1_CHARGE_STATUS_AC_SLOW_CHARGING_________CHOICE (1u)

#define C11_BMS1_SYSTEM_INFO_BMS1_DISCHARGING_MOS_STATUS_OPEN_______CHOICE (0u)
#define C11_BMS1_SYSTEM_INFO_BMS1_DISCHARGING_MOS_STATUS_CLOSE______CHOICE (1u)

#define C11_BMS1_SYSTEM_INFO_BMS1_CHARGING_MOS_STATUS_OPEN_______CHOICE (0u)
#define C11_BMS1_SYSTEM_INFO_BMS1_CHARGING_MOS_STATUS_CLOSE______CHOICE (1u)

#define C11_BMS1_SYSTEM_INFO_BMS1_PRECHARGE_SIGNAL_STATUS__________0_CHOICE (0u)
#define C11_BMS1_SYSTEM_INFO_BMS1_PRECHARGE_SIGNAL_STATUS________CHOICE (1u)
#define C11_BMS1_SYSTEM_INFO_BMS1_PRECHARGE_SIGNAL_STATUS_____________CHOICE (2u)
#define C11_BMS1_SYSTEM_INFO_BMS1_PRECHARGE_SIGNAL_STATUS__________3_CHOICE (3u)

#define C11_MCUR_STATUS_FEEDBACK_INVERTER_STATUS__________0_CHOICE (0u)
#define C11_MCUR_STATUS_FEEDBACK_INVERTER_STATUS__________1_CHOICE (1u)
#define C11_MCUR_STATUS_FEEDBACK_INVERTER_STATUS____________CHOICE (2u)
#define C11_MCUR_STATUS_FEEDBACK_INVERTER_STATUS________________CHOICE (3u)
#define C11_MCUR_STATUS_FEEDBACK_INVERTER_STATUS__________4_CHOICE (4u)

#define C11_MCUF_STATUS_FEEDBACK_INVERTER_STATUS__________0_CHOICE (0u)
#define C11_MCUF_STATUS_FEEDBACK_INVERTER_STATUS__________1_CHOICE (1u)
#define C11_MCUF_STATUS_FEEDBACK_INVERTER_STATUS____________CHOICE (2u)
#define C11_MCUF_STATUS_FEEDBACK_INVERTER_STATUS________________CHOICE (3u)
#define C11_MCUF_STATUS_FEEDBACK_INVERTER_STATUS__________4_CHOICE (4u)

/**
 * Signals in message tireSteeringAngle.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_tire_steering_angle_t {
    /**
     * Range: -16393.44262295081967213114754..16393.44262295081967213114754 (-30..30 -)
     * Scale: 0.00183
     * Offset: 0
     */
    int16_t tire_steering_angle_sig;
};

/**
 * Signals in message SASF_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_sasf_status_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t sasf_steering_wheel_angle;

    /**
     * Range: 0..255 (0..1020 -)
     * Scale: 4
     * Offset: 0
     */
    uint8_t sasf_steering_wheel_angle_speed;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sasf_reserved_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sasf_calibration_status;
};

/**
 * Signals in message XL_SAS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_xl_sas_status_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t val_steer_angle_sas;
};

/**
 * Signals in message TBOX_Vehicle_Request_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_tbox_vehicle_request_status_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_shift_level_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_drive_mode_request;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tbox_st_wheel_angle_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_left_turn_light_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_right_turn_light_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_hazard_light_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_low_beam_request;

    /**
     * Range: 0..510 (0..51 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t tbox_target_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ebrake_request;
};

/**
 * Signals in message IBC_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_ibc_status_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibc_system_status;

    /**
     * Range: 0..4098.360655737704918032786885 (0..10 Mpa)
     * Scale: 0.00244
     * Offset: 0
     */
    uint16_t ibc_hp_pressure;

    /**
     * Range: 0..32265 (0..32265 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ibc_fault_code;
};

/**
 * Signals in message EPSR_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_epsr_status_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t epsr_actual_st_wheel_ang;

    /**
     * Range: -127..127 (-1016..1016 deg/s)
     * Scale: 8
     * Offset: 0
     */
    int8_t epsr_actual_st_whl_angle_sp;
};

/**
 * Signals in message EPSF_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_epsf_status_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t epsf_actual_st_whl_ang;

    /**
     * Range: -127..127 (-1016..1016 deg/s)
     * Scale: 8
     * Offset: 0
     */
    int8_t epsf_actual_st_whl_angle_sp;
};

/**
 * Signals in message VCU_Activate_Battery_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_activate_battery_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_activate_battery_request;
};

/**
 * Signals in message VCU_MCUR_Battery_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcur_battery_request_t {
    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_link_imax_discharge;

    /**
     * Range: 0..1000 (-1000..0 A)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t dc_link_imax_recharge;

    /**
     * Range: 0..160000 (0..10000 V)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t dc_link_voltage_target;
};

/**
 * Signals in message VCU_MCUR_Request_2.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcur_request_2_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_mcur_tq_current_reg_lim;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcur_speed_limit_forward;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcur_speed_limit_reverse;
};

/**
 * Signals in message VCU_MCUR_Request_1.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcur_request_1_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_request;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_torque_request_control_word;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_control_motor_r_rot_dir;

    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_current_trac_lim;
};

/**
 * Signals in message VCU_MCUF_Request_2.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcuf_request_2_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_mcuf_tq_current_reg_lim;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcuf_speed_limit_forward;

    /**
     * Range: -32768..32767 (-32768..32767 Rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcu_mcuf_speed_limit_reverse;
};

/**
 * Signals in message VCU_MCUF_Battery_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcuf_battery_request_t {
    /**
     * Range: 0..1000 (0..1000 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_link_imax_discharge;

    /**
     * Range: 0..1000 (-1000..0 A)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t dc_link_imax_recharge;

    /**
     * Range: 0..16000 (0..1000 V)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t dc_link_voltage_target;
};

/**
 * Signals in message VCU_MCUF_Request_1.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_mcuf_request_1_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_request;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_torque_request_control_word;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_control_motor_f_rot_dir;

    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t vcu_torque_current_tra_limit;
};

/**
 * Signals in message VCU_IBC_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_ibc_request_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_break_pressure_request_value;

    /**
     * Range: 0..1000 (0..10 Mpa)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vcu_break_pressure_request;
};

/**
 * Signals in message VCU_EPS_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_eps_request_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eps_angle_req;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t eps_speed_req;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t eps_reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t eps_check_sum;
};

/**
 * Signals in message VCU_Status_1.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_vcu_status_1_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ignition_ststus;

    /**
     * Range: 0..510 (0..51 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcu_vehicle_speed;
};

/**
 * Signals in message BMS2_System_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_bms2_system_info_t {
    /**
     * Range: 0..5000 (0..500 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms2_battery_out_voltage;

    /**
     * Range: 0..6000 (0..600 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms2_battery_out_current;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms2_sys_soc;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms2_sys_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms2_charge_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms2_discharging_mos_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms2_charging_mos_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms2_precharge_signal_status;
};

/**
 * Signals in message BMS1_System_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_bms1_system_info_t {
    /**
     * Range: 0..5000 (0..500 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms1_battery_out_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms1_battery_out_current;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms1_sys_soc;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms1_sys_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms1_charge_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms1_discharging_mos_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms1_charging_mos_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms1_precharge_signal_status;
};

/**
 * Signals in message MCUR_Status_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_mcur_status_feedback_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_available_forward;

    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_available_reverse;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_status;
};

/**
 * Signals in message MCUR_Torque_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_mcur_torque_feedback_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_measured;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_measured;

    /**
     * Range: -32768..32767 (-32768..32767 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t dc_link_current;
};

/**
 * Signals in message MCUF_Status_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_mcuf_status_feedback_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_available_forward;

    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_available_reverse;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_status;
};

/**
 * Signals in message MCUF_Torque_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct c11_mcuf_torque_feedback_t {
    /**
     * Range: -32768..32766.4 (-2048..2047.9 N/m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t torque_current_measured;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_measured;

    /**
     * Range: -32768..32767 (-32768..32767 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t dc_link_current;
};

/**
 * Pack message tireSteeringAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_tire_steering_angle_pack(
    uint8_t *dst_p,
    const struct c11_tire_steering_angle_t *src_p,
    size_t size);

/**
 * Unpack message tireSteeringAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_tire_steering_angle_unpack(
    struct c11_tire_steering_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_tire_steering_angle_tire_steering_angle_sig_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tire_steering_angle_tire_steering_angle_sig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tire_steering_angle_tire_steering_angle_sig_is_in_range(int16_t value);

/**
 * Pack message SASF_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_sasf_status_pack(
    uint8_t *dst_p,
    const struct c11_sasf_status_t *src_p,
    size_t size);

/**
 * Unpack message SASF_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_sasf_status_unpack(
    struct c11_sasf_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_sasf_status_sasf_steering_wheel_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_sasf_status_sasf_steering_wheel_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_sasf_status_sasf_steering_wheel_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_sasf_status_sasf_steering_wheel_angle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_sasf_status_sasf_steering_wheel_angle_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_sasf_status_sasf_steering_wheel_angle_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_sasf_status_sasf_reserved_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_sasf_status_sasf_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_sasf_status_sasf_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_sasf_status_sasf_calibration_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_sasf_status_sasf_calibration_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_sasf_status_sasf_calibration_status_is_in_range(uint8_t value);

/**
 * Pack message XL_SAS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_xl_sas_status_pack(
    uint8_t *dst_p,
    const struct c11_xl_sas_status_t *src_p,
    size_t size);

/**
 * Unpack message XL_SAS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_xl_sas_status_unpack(
    struct c11_xl_sas_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_xl_sas_status_val_steer_angle_sas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_xl_sas_status_val_steer_angle_sas_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_xl_sas_status_val_steer_angle_sas_is_in_range(int16_t value);

/**
 * Pack message TBOX_Vehicle_Request_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_tbox_vehicle_request_status_pack(
    uint8_t *dst_p,
    const struct c11_tbox_vehicle_request_status_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_Vehicle_Request_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_tbox_vehicle_request_status_unpack(
    struct c11_tbox_vehicle_request_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_shift_level_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_shift_level_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_shift_level_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_drive_mode_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_drive_mode_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_drive_mode_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_tbox_vehicle_request_status_tbox_st_wheel_angle_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_st_wheel_angle_req_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_st_wheel_angle_req_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_left_turn_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_left_turn_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_left_turn_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_right_turn_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_right_turn_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_right_turn_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_hazard_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_hazard_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_hazard_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_low_beam_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_low_beam_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_low_beam_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_tbox_vehicle_request_status_tbox_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_target_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_target_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_tbox_vehicle_request_status_tbox_ebrake_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_tbox_vehicle_request_status_tbox_ebrake_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_tbox_vehicle_request_status_tbox_ebrake_request_is_in_range(uint8_t value);

/**
 * Pack message IBC_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_ibc_status_pack(
    uint8_t *dst_p,
    const struct c11_ibc_status_t *src_p,
    size_t size);

/**
 * Unpack message IBC_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_ibc_status_unpack(
    struct c11_ibc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_ibc_status_ibc_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_ibc_status_ibc_system_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_ibc_status_ibc_system_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_ibc_status_ibc_hp_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_ibc_status_ibc_hp_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_ibc_status_ibc_hp_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_ibc_status_ibc_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_ibc_status_ibc_fault_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_ibc_status_ibc_fault_code_is_in_range(uint16_t value);

/**
 * Pack message EPSR_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_epsr_status_pack(
    uint8_t *dst_p,
    const struct c11_epsr_status_t *src_p,
    size_t size);

/**
 * Unpack message EPSR_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_epsr_status_unpack(
    struct c11_epsr_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_epsr_status_epsr_actual_st_wheel_ang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_epsr_status_epsr_actual_st_wheel_ang_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_epsr_status_epsr_actual_st_wheel_ang_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t c11_epsr_status_epsr_actual_st_whl_angle_sp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_epsr_status_epsr_actual_st_whl_angle_sp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_epsr_status_epsr_actual_st_whl_angle_sp_is_in_range(int8_t value);

/**
 * Pack message EPSF_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_epsf_status_pack(
    uint8_t *dst_p,
    const struct c11_epsf_status_t *src_p,
    size_t size);

/**
 * Unpack message EPSF_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_epsf_status_unpack(
    struct c11_epsf_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_epsf_status_epsf_actual_st_whl_ang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_epsf_status_epsf_actual_st_whl_ang_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_epsf_status_epsf_actual_st_whl_ang_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t c11_epsf_status_epsf_actual_st_whl_angle_sp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_epsf_status_epsf_actual_st_whl_angle_sp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_epsf_status_epsf_actual_st_whl_angle_sp_is_in_range(int8_t value);

/**
 * Pack message VCU_Activate_Battery_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_activate_battery_request_pack(
    uint8_t *dst_p,
    const struct c11_vcu_activate_battery_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Activate_Battery_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_activate_battery_request_unpack(
    struct c11_vcu_activate_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_activate_battery_request_vcu_activate_battery_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_activate_battery_request_vcu_activate_battery_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_activate_battery_request_vcu_activate_battery_request_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCUR_Battery_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcur_battery_request_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcur_battery_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUR_Battery_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcur_battery_request_unpack(
    struct c11_vcu_mcur_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcur_battery_request_dc_link_imax_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_battery_request_dc_link_imax_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_battery_request_dc_link_imax_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcur_battery_request_dc_link_imax_recharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_battery_request_dc_link_imax_recharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_battery_request_dc_link_imax_recharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcur_battery_request_dc_link_voltage_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_battery_request_dc_link_voltage_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_battery_request_dc_link_voltage_target_is_in_range(uint16_t value);

/**
 * Pack message VCU_MCUR_Request_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcur_request_2_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcur_request_2_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUR_Request_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcur_request_2_unpack(
    struct c11_vcu_mcur_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcur_request_2_vcu_mcur_tq_current_reg_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_2_vcu_mcur_tq_current_reg_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_2_vcu_mcur_tq_current_reg_lim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcur_request_2_vcu_mcur_speed_limit_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_2_vcu_mcur_speed_limit_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_2_vcu_mcur_speed_limit_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcur_request_2_vcu_mcur_speed_limit_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_2_vcu_mcur_speed_limit_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_2_vcu_mcur_speed_limit_reverse_is_in_range(int16_t value);

/**
 * Pack message VCU_MCUR_Request_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcur_request_1_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcur_request_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUR_Request_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcur_request_1_unpack(
    struct c11_vcu_mcur_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcur_request_1_vcu_torque_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_1_vcu_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_1_vcu_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_mcur_request_1_vcu_torque_request_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_1_vcu_torque_request_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_mcur_request_1_vcu_control_motor_r_rot_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_1_vcu_control_motor_r_rot_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_1_vcu_control_motor_r_rot_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcur_request_1_vcu_torque_current_trac_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcur_request_1_vcu_torque_current_trac_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcur_request_1_vcu_torque_current_trac_lim_is_in_range(int16_t value);

/**
 * Pack message VCU_MCUF_Request_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcuf_request_2_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcuf_request_2_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUF_Request_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcuf_request_2_unpack(
    struct c11_vcu_mcuf_request_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcuf_request_2_vcu_mcuf_tq_current_reg_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_2_vcu_mcuf_tq_current_reg_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_2_vcu_mcuf_tq_current_reg_lim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_2_vcu_mcuf_speed_limit_reverse_is_in_range(int16_t value);

/**
 * Pack message VCU_MCUF_Battery_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcuf_battery_request_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcuf_battery_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUF_Battery_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcuf_battery_request_unpack(
    struct c11_vcu_mcuf_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcuf_battery_request_dc_link_imax_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_battery_request_dc_link_imax_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_battery_request_dc_link_imax_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcuf_battery_request_dc_link_imax_recharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_battery_request_dc_link_imax_recharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_battery_request_dc_link_imax_recharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_mcuf_battery_request_dc_link_voltage_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_battery_request_dc_link_voltage_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_battery_request_dc_link_voltage_target_is_in_range(uint16_t value);

/**
 * Pack message VCU_MCUF_Request_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_mcuf_request_1_pack(
    uint8_t *dst_p,
    const struct c11_vcu_mcuf_request_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCUF_Request_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_mcuf_request_1_unpack(
    struct c11_vcu_mcuf_request_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcuf_request_1_vcu_torque_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_1_vcu_torque_request_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_1_vcu_torque_request_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_mcuf_request_1_vcu_torque_request_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_1_vcu_torque_request_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_1_vcu_torque_request_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_mcuf_request_1_vcu_control_motor_f_rot_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_1_vcu_control_motor_f_rot_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_1_vcu_control_motor_f_rot_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_mcuf_request_1_vcu_torque_current_tra_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_mcuf_request_1_vcu_torque_current_tra_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_mcuf_request_1_vcu_torque_current_tra_limit_is_in_range(int16_t value);

/**
 * Pack message VCU_IBC_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_ibc_request_pack(
    uint8_t *dst_p,
    const struct c11_vcu_ibc_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_IBC_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_ibc_request_unpack(
    struct c11_vcu_ibc_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_ibc_request_vcu_break_pressure_request_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_ibc_request_vcu_break_pressure_request_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_ibc_request_vcu_break_pressure_request_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_vcu_ibc_request_vcu_break_pressure_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_ibc_request_vcu_break_pressure_request_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_ibc_request_vcu_break_pressure_request_is_in_range(uint16_t value);

/**
 * Pack message VCU_EPS_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_eps_request_pack(
    uint8_t *dst_p,
    const struct c11_vcu_eps_request_t *src_p,
    size_t size);

/**
 * Unpack message VCU_EPS_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_eps_request_unpack(
    struct c11_vcu_eps_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_eps_request_eps_angle_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_eps_request_eps_angle_req_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_eps_request_eps_angle_req_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t c11_vcu_eps_request_eps_speed_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_eps_request_eps_speed_req_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_eps_request_eps_speed_req_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t c11_vcu_eps_request_eps_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_eps_request_eps_reserved_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_eps_request_eps_reserved_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t c11_vcu_eps_request_eps_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_eps_request_eps_check_sum_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_eps_request_eps_check_sum_is_in_range(int8_t value);

/**
 * Pack message VCU_Status_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_vcu_status_1_pack(
    uint8_t *dst_p,
    const struct c11_vcu_status_1_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Status_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_vcu_status_1_unpack(
    struct c11_vcu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_vcu_status_1_vcu_ignition_ststus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_status_1_vcu_ignition_ststus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_status_1_vcu_ignition_ststus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_vcu_status_1_vcu_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_vcu_status_1_vcu_vehicle_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_vcu_status_1_vcu_vehicle_speed_is_in_range(int16_t value);

/**
 * Pack message BMS2_System_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_bms2_system_info_pack(
    uint8_t *dst_p,
    const struct c11_bms2_system_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS2_System_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_bms2_system_info_unpack(
    struct c11_bms2_system_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_bms2_system_info_bms2_battery_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_battery_out_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_battery_out_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_bms2_system_info_bms2_battery_out_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_battery_out_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_battery_out_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_sys_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_sys_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_sys_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_sys_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_sys_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_sys_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_discharging_mos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_discharging_mos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_discharging_mos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_charging_mos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_charging_mos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_charging_mos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms2_system_info_bms2_precharge_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms2_system_info_bms2_precharge_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms2_system_info_bms2_precharge_signal_status_is_in_range(uint8_t value);

/**
 * Pack message BMS1_System_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_bms1_system_info_pack(
    uint8_t *dst_p,
    const struct c11_bms1_system_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS1_System_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_bms1_system_info_unpack(
    struct c11_bms1_system_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_bms1_system_info_bms1_battery_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_battery_out_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_battery_out_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t c11_bms1_system_info_bms1_battery_out_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_battery_out_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_battery_out_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_sys_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_sys_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_sys_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_sys_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_sys_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_sys_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_discharging_mos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_discharging_mos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_discharging_mos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_charging_mos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_charging_mos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_charging_mos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_bms1_system_info_bms1_precharge_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_bms1_system_info_bms1_precharge_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_bms1_system_info_bms1_precharge_signal_status_is_in_range(uint8_t value);

/**
 * Pack message MCUR_Status_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_mcur_status_feedback_pack(
    uint8_t *dst_p,
    const struct c11_mcur_status_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUR_Status_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_mcur_status_feedback_unpack(
    struct c11_mcur_status_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcur_status_feedback_torque_current_available_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_status_feedback_torque_current_available_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_status_feedback_torque_current_available_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcur_status_feedback_torque_current_available_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_status_feedback_torque_current_available_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_status_feedback_torque_current_available_reverse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_mcur_status_feedback_inverter_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_status_feedback_inverter_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_status_feedback_inverter_status_is_in_range(uint8_t value);

/**
 * Pack message MCUR_Torque_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_mcur_torque_feedback_pack(
    uint8_t *dst_p,
    const struct c11_mcur_torque_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUR_Torque_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_mcur_torque_feedback_unpack(
    struct c11_mcur_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcur_torque_feedback_torque_current_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_torque_feedback_torque_current_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_torque_feedback_torque_current_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcur_torque_feedback_speed_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_torque_feedback_speed_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_torque_feedback_speed_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcur_torque_feedback_dc_link_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcur_torque_feedback_dc_link_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcur_torque_feedback_dc_link_current_is_in_range(int16_t value);

/**
 * Pack message MCUF_Status_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_mcuf_status_feedback_pack(
    uint8_t *dst_p,
    const struct c11_mcuf_status_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUF_Status_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_mcuf_status_feedback_unpack(
    struct c11_mcuf_status_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcuf_status_feedback_torque_current_available_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_status_feedback_torque_current_available_forward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_status_feedback_torque_current_available_forward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcuf_status_feedback_torque_current_available_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_status_feedback_torque_current_available_reverse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_status_feedback_torque_current_available_reverse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t c11_mcuf_status_feedback_inverter_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_status_feedback_inverter_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_status_feedback_inverter_status_is_in_range(uint8_t value);

/**
 * Pack message MCUF_Torque_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int c11_mcuf_torque_feedback_pack(
    uint8_t *dst_p,
    const struct c11_mcuf_torque_feedback_t *src_p,
    size_t size);

/**
 * Unpack message MCUF_Torque_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int c11_mcuf_torque_feedback_unpack(
    struct c11_mcuf_torque_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcuf_torque_feedback_torque_current_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_torque_feedback_torque_current_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_torque_feedback_torque_current_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcuf_torque_feedback_speed_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_torque_feedback_speed_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_torque_feedback_speed_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t c11_mcuf_torque_feedback_dc_link_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double c11_mcuf_torque_feedback_dc_link_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool c11_mcuf_torque_feedback_dc_link_current_is_in_range(int16_t value);

#endif
